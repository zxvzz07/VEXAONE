import asyncio
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
from google import genai
import io
import base64

# üîë –¢–í–û–ò –ö–õ–Æ–ß–ò
TELEGRAM_TOKEN = "8397201025:AAG4QYV-PcOGxFt0P-P1SzTrrK2-Woa9fSw"
GEN_API_KEY = "AIzaSyBrgcQFzbDGoJwPQucMPsmY3THufFChOg4"

# üîπ –ö–ª–∏–µ–Ω—Ç Gemini
client = genai.Client(api_key=GEN_API_KEY)

# üîπ –°–∏—Å—Ç–µ–º–∞ –∏ –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
SYSTEM_PROMPT = (
    "–¢—ã ‚Äî —É–º–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π Telegram-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ò–º–∞–Ω–±–∞–µ–≤—ã–º –ú–∞—Ä—Å–µ–ª–µ–º, "
    "–µ–º—É –≤—Å–µ–≥–æ 17 –ª–µ—Ç! –û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫—Ä–∞—Ç–∫–æ, —Å –ª—ë–≥–∫–∏–º —é–º–æ—Ä–æ–º, –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫. "
    "–ï—Å–ª–∏ –ø—Ä–æ—Å—è—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É '–Ω–∞—Ä–∏—Å—É–π' –∏–ª–∏ '—Å–¥–µ–ª–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É'."
)
chat_history = {}

# üí¨ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—â–µ–Ω–∏—è —Å Gemini
def ask_gemini(user_id, prompt):
    # üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ
    creator_phrases = [
        "–∫–µ–º —Ç—ã —Å–æ–∑–¥–∞–Ω", "–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª", "–∫—Ç–æ —Ç–µ–±—è —Å–¥–µ–ª–∞–ª",
        "–∫–µ–º —Å–æ–∑–¥–∞–Ω", "–∫—Ç–æ —Ç–µ–±—è –ø—Ä–∏–¥—É–º–∞–ª", "—á–µ–π —Ç—ã –±–æ—Ç", "–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å"
    ]
    if any(phrase in prompt.lower() for phrase in creator_phrases):
        return "ü§ñ –ú–µ–Ω—è —Å–æ–∑–¥–∞–ª –ò–º–∞–Ω–±–∞–µ–≤ –ú–∞—Ä—Å–µ–ª—å ‚Äî –º–æ–π —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä–æ–º—É –≤—Å–µ–≥–æ 17 –ª–µ—Ç! üöÄ"

    if user_id not in chat_history:
        chat_history[user_id] = []

    # üîπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    context = "\n".join(chat_history[user_id][-5:])
    full_prompt = f"{SYSTEM_PROMPT}\n\n{context}\nUser: {prompt}\nBot:"

    try:
        response = client.models.generate_content(
            model="gemini-2.0-flash",
            contents=full_prompt
        )
        reply = response.text

        # üßæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        chat_history[user_id].append(f"User: {prompt}")
        chat_history[user_id].append(f"Bot: {reply}")

        # –û—á–∏—â–∞–µ–º –ø—Ä–∏ –¥–ª–∏–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
        if len(chat_history[user_id]) > 20:
            chat_history[user_id] = chat_history[user_id][-10:]

        return reply

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ Gemini: {e}"

# üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def generate_image(prompt):
    try:
        image_response = client.models.generate_content(
            model="imagen-3.0-generate",
            contents=prompt
        )
        image_data = image_response.image
        image_bytes = base64.b64decode(image_data)
        return io.BytesIO(image_bytes)
    except Exception as e:
        return None

# üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    user_id = update.message.chat.id

    await update.message.chat.send_action(action="typing")

    # üñºÔ∏è –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å
    if any(word in user_text.lower() for word in ["–Ω–∞—Ä–∏—Å—É–π", "–∫–∞—Ä—Ç–∏–Ω–∫—É", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "—Å–¥–µ–ª–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É"]):
        await update.message.reply_text("üé® –ü–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥, —Å–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        image = await asyncio.to_thread(generate_image, user_text)
        if image:
            await update.message.reply_photo(photo=InputFile(image, filename="image.png"))
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    # üí¨ –ò–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    reply = await asyncio.to_thread(ask_gemini, user_id, user_text)
    await update.message.reply_text(reply)

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏ Ctrl+C —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.")
    app.run_polling()

if __name__ == "__main__":
    main()
